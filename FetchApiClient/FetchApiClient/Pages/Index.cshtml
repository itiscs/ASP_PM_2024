@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
</div>

<div id="userInfo" style="display:none;">
    <p>Добро пожаловать <span id="userName"></span>!</p>
    <input type="button" value="Выйти" id="logOut" />
</div>
<div id="loginForm">
    <h3>Вход на сайт</h3>
    <p>
        <label>Введите username</label><br />
        <input type="username" id="username" />
    </p>
    <p>
        <label>Введите пароль</label><br />
        <input type="password" id="password" />
    </p>
    <input type="submit" id="submitLogin" value="Логин" />
</div>
<p>
    <input type="submit" id="getData" value="Получить данные" />
</p>

<div id="dataBlock" style="display:none">
    <h2>Список товаров</h2>
    <table>
        <thead>
            <tr>
                <th>Название</th>
                <th>Описание</th>
                <th>Цена</th>
                <th>Количество</th>
                <th>Категория</th>
                <th>Изображение</th>
                <th>Дата</th>                
                <th></th>
            </tr>
        </thead>
        <tbody cellpadding="3">
        </tbody>
    </table>

    <div>
        <input type="hidden" id="productId" />
        <dl>
            <dt>Название:</dt>
            <dd><input id="name" /></dd>
            <dt>Описание:</dt>
            <dd><input id="descr" /></dd>
            <dt>Цена:</dt>
            <dd><input id="price" type="number" /></dd>
            <dt>Количество:</dt>
            <dd><input id="count" type="number" /></dd>
            <dt>Категория:</dt>
            <dd><input id="categ" /></dd>
            <dt>Изображение:</dt>
            <dd><input id="image" /></dd>
            <dt>Дата создания:</dt>
            <dd><input id="created" readonly/></dd>
        </dl>
        <p>
            <button id="saveBtn">Сохранить</button>
            <button id="resetBtn">Сбросить</button>
        </p>
    </div>
   


</div>

<script>
    var tokenKey = "accessToken";
    var loginApiUrl = "http://localhost:5223/token?";
    var apiUrl = "http://localhost:5223/api/products/";

    // при нажатии на кнопку отправки формы идет запрос к /token для получения токена
    document.getElementById("submitLogin").addEventListener("click", async e => {
        e.preventDefault();
        // отправляет запрос и получаем ответ
        const response = await fetch(loginApiUrl  +
            new URLSearchParams({
                username: document.getElementById("username").value,
                password: document.getElementById("password").value
            }), {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" }
        });
        // если запрос прошел нормально
        if (response.ok === true) {
            // получаем данные
            const data = await response.json();
            // изменяем содержимое и видимость блоков на странице
            document.getElementById("userName").innerText = data.username;
            document.getElementById("userInfo").style.display = "block";
            document.getElementById("loginForm").style.display = "none";
            // сохраняем в хранилище sessionStorage токен доступа
            sessionStorage.setItem(tokenKey, data.access_token);
        }
        else  // если произошла ошибка, получаем код статуса
            console.log("Status: ", response.status);
    });

    // кнопка для обращения по пути "/data" для получения данных
    document.getElementById("getData").addEventListener("click", async e => {
        e.preventDefault();
        // получаем токен из sessionStorage
        const token = sessionStorage.getItem(tokenKey);
        // отправляем запрос к "/data
        const response = await fetch(apiUrl, {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Authorization": "Bearer " + token  // передача токена в заголовке
            }
        });

        if (response.ok === true) {
            document.getElementById("dataBlock").style.display = "block";
            
            const prods = await response.json();
            const rows = document.querySelector("tbody");
            rows.innerHTML = "";

            // добавляем полученные элементы в таблицу
            prods.forEach(prod => rows.append(row(prod)));
        }
        else
            console.log("Status: ", response.status);
    });

    // Получение одного товара
    async function getProduct(id) {
        const token = sessionStorage.getItem(tokenKey);

        const response = await fetch(apiUrl + id, {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Authorization": "Bearer " + token
            }
        });
        if (response.ok === true) {
            const prod = await response.json();
            document.getElementById("productId").value = prod.id;
            document.getElementById("name").value = prod.name;
            document.getElementById("descr").value = prod.description;
            document.getElementById("image").value = prod.imageUrl;
            document.getElementById("price").value = prod.price;
            document.getElementById("count").value = prod.stockQuantity;
            document.getElementById("categ").value = prod.category;
            document.getElementById("created").value = prod.createdAt;
        }
        else {
            // если произошла ошибка, получаем сообщение об ошибке
            const error = await response.json();
            console.log(error.message); // и выводим его на консоль
        }
    }

    // Добавление пользователя
    async function createProduct(name, descr, image, price,categ,count,created) {

        const token = sessionStorage.getItem(tokenKey);

        const response = await fetch(apiUrl, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": "Bearer " + token
            },
            body: JSON.stringify({
                name: name,
                description: descr,
                imageUrl: image,
                price: parseInt(price, 10),
                category: categ,
                stockQuantity: parseInt(count, 10)
            })
        });
        if (response.ok === true) {
            const prod = await response.json();
            document.querySelector("tbody").append(row(prod));
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }
    // Изменение товара
    async function editProduct(id, name, descr, image, price, count, categ,created) {
        const token = sessionStorage.getItem(tokenKey);

        const response = await fetch(apiUrl + id, {
            method: "PUT",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": "Bearer " + token
            },
            body: JSON.stringify({
                id: id,
                name: name,
                description: descr,
                imageUrl: image,
                price: parseInt(price, 10),
                category: categ,
                stockQuantity: parseInt(count,10)
            })
        });
        if (response.ok === true) {
            document.querySelector(`tr[data-rowid='${id}']`).replaceWith(row({
                name: name,
                description: descr,
                imageUrl: image,
                price: price,
                category: categ,
                stockQuantity: count,
                createdAt: created
            }));
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }
    // Удаление товара
    async function deleteProduct(id) {
        const token = sessionStorage.getItem(tokenKey);

        const response = await fetch(apiUrl + id, {
            method: "DELETE",
            headers: {
                "Accept": "application/json",
                "Authorization": "Bearer " + token
            }
        });
        if (response.ok === true) {
            document.querySelector(`tr[data-rowid='${id}']`).remove();
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }

    // создание строки для таблицы
    function row(prod) {

        const tr = document.createElement("tr");
        tr.setAttribute("data-rowid", prod.id);

        const nameTd = document.createElement("td");
        nameTd.append(prod.name);
        tr.append(nameTd);

        const descrTd = document.createElement("td");
        descrTd.append(prod.description);
        tr.append(descrTd);

        const priceTd = document.createElement("td");
        priceTd.append(prod.price);
        tr.append(priceTd);

        const countTd = document.createElement("td");
        countTd.append(prod.stockQuantity);
        tr.append(countTd);

        const categTd = document.createElement("td");
        categTd.append(prod.category);
        tr.append(categTd);

        const imageTd = document.createElement("td");
        imageTd.append(prod.imageUrl);
        tr.append(imageTd);

        const createdTd = document.createElement("td");
        createdTd.append(prod.createdAt);
        tr.append(createdTd);

        const linksTd = document.createElement("td");

        const editLink = document.createElement("button");
        editLink.append("Изменить");
        editLink.addEventListener("click", async () => await getProduct(prod.id));
        linksTd.append(editLink);

        const removeLink = document.createElement("button");
        removeLink.append("Удалить");
        removeLink.addEventListener("click", async () => await deleteProduct(prod.id));

        linksTd.append(removeLink);
        tr.appendChild(linksTd);

        return tr;
    }

    // сброс данных формы после отправки
    function reset() {
        document.getElementById("productId").value = "";
        document.getElementById("name").value = "";
        document.getElementById("descr").value = "";
        document.getElementById("image").value = "";
        document.getElementById("price").value = "";
        document.getElementById("count").value = "";
        document.getElementById("categ").value = "";
        document.getElementById("created").value = "";
    }

    // сброс значений формы
    document.getElementById("resetBtn").addEventListener("click", () => reset());


    document.getElementById("saveBtn").addEventListener("click", async () => {

        const id = document.getElementById("productId").value;
        const name = document.getElementById("name").value;
        const descr = document.getElementById("descr").value;
        const image = document.getElementById("image").value;
        const price = document.getElementById("price").value;
        const categ = document.getElementById("categ").value;
        const count = document.getElementById("count").value;
        const created = document.getElementById("created").value;


        if (id === "")
            await createProduct(name, descr, image, price, count, categ, created);
        else
            await editProduct(id, name, descr, image, price, count, categ, created);
        reset();
    });

    // условный выход - просто удаляем токен и меняем видимость блоков
    document.getElementById("logOut").addEventListener("click", e => {

        e.preventDefault();
        document.getElementById("userName").innerText = "";
        document.getElementById("userInfo").style.display = "none";
        document.getElementById("loginForm").style.display = "block";
        document.getElementById("dataBlock").style.display = "none";

        sessionStorage.removeItem(tokenKey);
    });
</script>
